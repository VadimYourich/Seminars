import logging

from random import randint
from token_1 import *
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Updater, CommandHandler, ConversationHandler, MessageHandler, Filters

reply_keyboard = [['/play ‚ñ∂Ô∏è', '/rules üìù'],
                  ['/settings ‚òëÔ∏è', '/close ‚èπÔ∏è']]
reply_keyboard2 = [['/close ‚èπÔ∏è', '/rules üìù']]

candies = 50
step = 15
markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=False)
markup2 = ReplyKeyboardMarkup(reply_keyboard2, one_time_keyboard=False, resize_keyboard=True)

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.DEBUG
)

logger = logging.getLogger(__name__)

TOKEN = token


def start(update, context):
    #name = f"{update.message.from_user.ferst_name} {update.message.from_user.last_name}"    -- —É –º–µ–Ω—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π, –Ω–µ –º–æ–≥—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è
    context.bot.send_photo(update.effective_chat.id, photo=open('icon-256x256.png', 'rb'))
    update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç! –°—ã–≥—Ä–∞–µ–º? –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é:", # {name} –∑–¥–µ—Å—å —Ç–æ–∂–µ —É–±—Ä–∞–ª
        reply_markup=markup
    )


def close_keyboard(update, context):
    update.message.reply_text(
        "–î–æ –≤—Å—Ç—Ä–µ—á–∏!",
        reply_markup=ReplyKeyboardRemove()
    )


def rules(update, context):
    update.message.reply_text(
        "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ñ–µ—Ç –Ω–∞ –∫–æ–Ω—É –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ñ–µ—Ç, "
        "–∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–Ω–æ –≤–∑—è—Ç—å –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑.")


def settings(update, context):
    update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ñ–µ—Ç –Ω–∞ –∫–æ–Ω—É –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ "
                              "–≤–æ–∑–º–æ–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Ö–æ–¥ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª: ", reply_markup=markup2)
    return 1


def set_settings(update, context):
    global candies
    global step
    candies, step = map(int, update.message.text.split())
    update.message.reply_text("–ü—Ä–∞–≤–∏–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã, –Ω–∞—á–∏–Ω–∞–µ–º!", reply_markup=markup2)
    return ConversationHandler.END


def play(update, context):
    update.message.reply_text(f"–ù–∞ –∫–æ–Ω—É {candies} –∫–æ–Ω—Ñ–µ—Ç. –í–∞—à —Ö–æ–¥. –ö–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ñ–µ—Ç –≤—ã –±–µ—Ä–µ—Ç–µ?"
                              f"(–î–æ—Å—Ç—É–ø–Ω–æ {step} –∫–æ–Ω—Ñ–µ—Ç)", reply_markup=markup2)
    return 1


def play_step(update, context):
    global candies
    global step
    candy = int(update.message.text)
    if candy > step:
        update.message.reply_text(f"–ë–µ—Ä–∏—Ç–µ –º–∞–∫—Å–∏–º—É–º {step} –∫–æ–Ω—Ñ–µ—Ç!", reply_markup=markup2)
        return 1
    else:
        candies -= candy
        if candies <= step:
            update.message.reply_text("–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞. –Ø –∑–∞–±–∏—Ä–∞—é –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–æ–Ω—Ñ–µ—Ç—ã, —è –ø–æ–±–µ–¥–∏–ª!", reply_markup=markup)
            return ConversationHandler.END
        else:
            if candies % (step + 1) == 0:
                rand = randint(1, step)
                candies -= rand
                update.message.reply_text(f"–Ø –±–µ—Ä—É {rand} –∫–æ–Ω—Ñ–µ—Ç. –û—Å—Ç–∞—ë—Ç—Å—è {candies}. –°—É–¥—è –ø–æ –≤—Å–µ–º—É, –ø–æ–±–µ–¥–∞ –∑–∞ –≤–∞–º–∏!",
                                          reply_markup=markup2)
            else:
                take = candies % (step + 1)
                candies -= take
                update.message.reply_text(f"–Ø –±–µ—Ä—É {take}. –ù–∞ –∫–æ–Ω—É {candies} –∫–æ–Ω—Ñ–µ—Ç", reply_markup=markup2)
            if candies <= step:
                update.message.reply_text("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã –ø–æ–±–µ–¥–∏–ª!", reply_markup=markup)
                return ConversationHandler.END


def stop(update, context):
    update.message.reply_text("–í—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ!", reply_markup=markup)
    return ConversationHandler.END


def main():
    updater = Updater(TOKEN)
    dp = updater.dispatcher
    settings_hundler = ConversationHandler(
        entry_points=[CommandHandler('settings', settings)],
        states={
            1: [MessageHandler(Filters.text & ~Filters.command, set_settings)]
        },
        fallbacks=[CommandHandler('stop', stop)]
    )

    play_hundler = ConversationHandler(
        entry_points=[CommandHandler('play', play)],
        states={
            1: [MessageHandler(Filters.text & ~Filters.command, play_step)]
        },
        fallbacks=[CommandHandler('stop', stop)]
    )

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("rules", rules))
    dp.add_handler(CommandHandler("close", close_keyboard))
    dp.add_handler(settings_hundler)
    dp.add_handler(play_hundler)


    updater.start_polling()
    updater.idle()


if __name__ == '__main__':
    main()